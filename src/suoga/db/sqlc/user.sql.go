// Code generated by sqlc. DO NOT EDIT.
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    username,
    pwd,
    email
) VALUES (
    $1,$2,$3
) RETURNING id, username, email, pwd, created_at, staff
`

type CreateUserParams struct {
	Username string         `json:"username"`
	Pwd      string         `json:"pwd"`
	Email    sql.NullString `json:"email"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (Users, error) {
	row := q.db.QueryRowContext(ctx, createUser, arg.Username, arg.Pwd, arg.Email)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Pwd,
		&i.CreatedAt,
		&i.Staff,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int32) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserForUpdate = `-- name: GetUserForUpdate :one
SELECT id, username, email, pwd, created_at, staff FROM users
    WHERE id = $1 LIMIT 1
    FOR NO KEY UPDATE
`

func (q *Queries) GetUserForUpdate(ctx context.Context, id int32) (Users, error) {
	row := q.db.QueryRowContext(ctx, getUserForUpdate, id)
	var i Users
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Email,
		&i.Pwd,
		&i.CreatedAt,
		&i.Staff,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, username, email, pwd, created_at, staff FROM users
    ORDER BY id
    LIMIT $1
    OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]Users, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Users
	for rows.Next() {
		var i Users
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Pwd,
			&i.CreatedAt,
			&i.Staff,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
